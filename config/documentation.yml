---
- class_functions:
  - examples:
    - Base64.decode("aGVsbG8=")
    - Base64.decode("aGVsbG8gd29ybGQ=")
    name: decode
  - examples:
    - Base64.encode(:hello)
    - Base64.encode("hello world")
    name: encode
  - examples:
    - Base64.strict_decode("aGVsbG8=")
    - Base64.strict_decode("aGVsbG8gd29ybGQ=")
    name: strict_decode
  - examples:
    - Base64.strict_encode(:hello)
    - Base64.strict_encode("hello world")
    name: strict_encode
  - examples:
    - Base64.urlsafe_decode("aGVsbG8=")
    - Base64.urlsafe_decode("aGVsbG8gd29ybGQ=")
    name: urlsafe_decode
  - examples:
    - Base64.urlsafe_encode(:hello)
    - Base64.urlsafe_encode("hello world")
    name: urlsafe_encode
  examples:
  - Base64.encode(:hello)
  - Base64.strict_encode(:hello)
  - Base64.urlsafe_encode(:hello)
  name: Base64
  parent: Object
- examples:
  - "!true"
  - Boolean.new(:a)
  - 'false'
  - 'true'
  instance_functions:
  - examples:
    - true & true
    - true & false
    - false & true
    - false & false
    name: "&"
  - examples:
    - true ^ true
    - true ^ false
    - false ^ true
    - false ^ false
    name: "^"
  - examples:
    - true.bitwise_and(true)
    - true.bitwise_and(false)
    - false.bitwise_and(true)
    - false.bitwise_and(false)
    name: bitwise_and
  - examples:
    - true.bitwise_or(true)
    - true.bitwise_or(false)
    - false.bitwise_or(true)
    - false.bitwise_or(false)
    name: bitwise_or
  - examples:
    - true.bitwise_xor(true)
    - true.bitwise_xor(false)
    - false.bitwise_xor(true)
    - false.bitwise_xor(false)
    name: bitwise_xor
  - examples:
    - true | true
    - true | false
    - false | true
    - false | false
    name: "|"
  name: Boolean
  parent: Object
- examples:
  - Boolean
  - Class.new(true)
  - List
  name: Class
  parent: Object
- examples:
  - Code.new
  name: Code
  parent: Object
- examples:
  - Context.new
  name: Context
  parent: Dictionary
- examples:
  - Current.user
  - Current.user!
  - Current.user.id
  - Current.user!.id
  instance_functions:
  - examples:
    - Current.user
    - Current.user.id
    name: user
  - examples:
    - Current.user!
    - Current.user!.id
    name: user!
  name: Current
  parent: Dictionary
- class_functions:
  - examples:
    - Date.current
    name: current
  - examples:
    - Date.hour
    name: hour
  - examples:
    - Date.now
    name: now
  - examples:
    - Date.today
    name: today
  - examples:
    - Date.tomorrow
    name: tomorrow
  - examples:
    - Date.yesterday
    name: yesterday
  examples:
  - Date.new
  - Date.today
  - Date.tomorrow
  - Date.yesterday
  instance_functions:
  - examples:
    - Date.new.change
    - 'Date.today.change(day: 1)'
    - 'Date.today.change(year: 1970)'
    - 'Date.today.change(day: 1, month: 1)'
    name: change
  - examples:
    - Date.today.hour
    name: hour
  - examples:
    - Date.today.hours
    name: hours
  - examples:
    - Date.today.minute
    name: minute
  - examples:
    - Date.today.minutes
    name: minutes
  - examples:
    - Date.today.second
    name: second
  - examples:
    - Date.today.seconds
    name: seconds
  name: Date
  parent: Object
- examples:
  - '1.0'
  - 1e1.0
  - 2.3e2
  instance_functions:
  - examples:
    - 10.1 % 6
    - 10.1 % 6.1
    name: "%"
  - examples:
    - 10.1 & 6
    - 10.1 & 6.1
    name: "&"
  - examples:
    - 10.1 * 6
    - 10.1 * 6.1
    name: "*"
  - examples:
    - 10.1 ** 6
    - 10.1 ** 6.1
    name: "**"
  - examples:
    - 10.1 + 6
    - 10.1 + 6.1
    - 10.1 + :hello
    - 10.1 + [1, 2, 3]
    name: "+"
  - examples:
    - 10.1 - 6
    - 10.1 - 6.1
    name: "-"
  - examples:
    - 10.1 / 6
    - 10.1 / 6.1
    name: "/"
  - examples:
    - 10.1 < 6
    - 10.1 < 6.1
    name: "<"
  - examples:
    - 10.1 << 6
    - 10.1 << 6.1
    name: !!str '<<'
  - examples:
    - 10.1 <= 6
    - 10.1 <= 6.1
    name: "<="
  - examples:
    - 10.1 <=> 6
    - 10.1 <=> 6.1
    name: "<=>"
  - examples:
    - 10.1 > 6
    - 10.1 > 6.1
    name: ">"
  - examples:
    - 10.1 >= 6
    - 10.1 >= 6.1
    name: ">="
  - examples:
    - 10.1 >> 6
    - 10.1 >> 6.1
    name: ">>"
  - examples:
    - 10.1 ^ 6
    - 10.1 ^ 6.1
    name: "^"
  - examples:
    - "-10.1.abs"
    - 6.1.abs
    name: abs
  - examples:
    - 10.1.bitwise_and(6)
    - 10.1.bitwise_and(6.1)
    name: bitwise_and
  - examples:
    - 10.1.bitwise_or(6)
    - 10.1.bitwise_or(6.1)
    name: bitwise_or
  - examples:
    - 10.1.bitwise_xor(6)
    - 10.1.bitwise_xor(6.1)
    name: bitwise_xor
  - examples:
    - 213.123.ceil
    - 213.123.ceil(-2)
    - 213.123.ceil(-1)
    - 213.123.ceil(0)
    - 213.123.ceil(1)
    - 213.123.ceil(2)
    name: ceil
  - examples:
    - 10.1.compare(6.1)
    - 10.1.compare(6)
    name: compare
  - examples:
    - 10.1.division(6.1)
    - 10.1.division(6)
    name: division
  - examples:
    - 11.0.eight?
    - 8.0.eight?
    name: eight?
  - examples:
    - 11.0.five?
    - 5.0.five?
    name: five?
  - examples:
    - 2.0.floor
    - 1.9.floor
    - 1.5.floor
    - 1.1.floor
    - 1.0.floor
    - 1234.56789.floor
    - 1234.56789.floor(-2)
    - 1234.56789.floor(-1)
    - 1234.56789.floor(0)
    - 1234.56789.floor(1)
    - 1234.56789.floor(2)
    name: floor
  - examples:
    - 11.0.four?
    - 4.0.four?
    name: four?
  - examples:
    - 10.1.inferior(6.1)
    - 10.1.inferior(6)
    name: inferior
  - examples:
    - 10.1.inferior_or_equal(6.1)
    - 10.1.inferior_or_equal(6)
    name: inferior_or_equal
  - examples:
    - 10.1.left_shift(6.1)
    - 10.1.left_shift(6)
    name: left_shift
  - examples:
    - 10.1.minus(6.1)
    - 10.1.minus(6)
    name: minus
  - examples:
    - 10.1.modulo(6.1)
    - 10.1.modulo(6)
    name: modulo
  - examples:
    - 10.1.multiplication(6.1)
    - 10.1.multiplication(6)
    name: multiplication
  - examples:
    - 11.0.nine?
    - 9.0.nine?
    name: nine?
  - examples:
    - 11.0.one?
    - 1.0.one?
    name: one?
  - examples:
    - 10.1.plus(6.1)
    - 10.1.plus(6)
    name: plus
  - examples:
    - 10.1.power(6.1)
    - 10.1.power(6)
    name: power
  - examples:
    - 10.1.right_shift(6.1)
    - 10.1.right_shift(6)
    name: right_shift
  - examples:
    - 2.0.round
    - 1.9.round
    - 1.5.round
    - 1.1.round
    - 1.0.round
    - 1234.56789.round
    - 1234.56789.round(-2)
    - 1234.56789.round(-1)
    - 1234.56789.round(0)
    - 1234.56789.round(1)
    - 1234.56789.round(2)
    name: round
  - examples:
    - 11.0.seven?
    - 7.0.seven?
    name: seven?
  - examples:
    - 11.0.six?
    - 6.0.six?
    name: six?
  - examples:
    - 4.0.sqrt
    - 4.1.sqrt
    name: sqrt
  - examples:
    - 10.1.superior(6.1)
    - 10.1.superior(6)
    name: superior
  - examples:
    - 10.1.superior_or_equal(6.1)
    - 10.1.superior_or_equal(6)
    name: superior_or_equal
  - examples:
    - 11.0.ten?
    - 10.0.ten?
    name: ten?
  - examples:
    - 11.0.three?
    - 3.0.three?
    name: three?
  - examples:
    - 2.0.truncate
    - 1.9.truncate
    - 1.5.truncate
    - 1.1.truncate
    - 1.0.truncate
    - 1234.56789.truncate
    - 1234.56789.truncate(-2)
    - 1234.56789.truncate(-1)
    - 1234.56789.truncate(0)
    - 1234.56789.truncate(1)
    - 1234.56789.truncate(2)
    name: truncate
  - examples:
    - 11.0.two?
    - 2.0.two?
    name: two?
  - examples:
    - 11.0.zero?
    - 0.0.zero?
    name: zero?
  - examples:
    - 10.1 | 6
    - 10.1 | 6.1
    name: "|"
  name: Decimal
  parent: Object
- examples:
  - "!{}"
  - Dictionary.new
  - 'Dictionary.new(a: 1, b: 2).a'
  - "{ a: 1, b: 2 }.b"
  - "{}"
  - "{} == {}"
  - "{}.to_list"
  instance_functions:
  - examples:
    - "{ a: 1 } < { a: 1, b: 2 }"
    name: "<"
  - examples:
    - "{ a: 1 } <= { a: 1, b: 2 }"
    name: "<="
  - examples:
    - "{ a: 1 } <=> { a: 1, b: 2 }"
    name: "<=>"
  - examples:
    - "{ a: 1 } > { a: 1, b: 2 }"
    name: ">"
  - examples:
    - "{ a: 1 } >= { a: 1, b: 2 }"
    name: ">="
  - examples:
    - "{ a: 1 }[:a]"
    name: "[]"
  - examples:
    - "{ a: 1 }.any?"
    name: any?
  - examples:
    - "{ a: 1 }.at(:a)"
    name: at
  - examples:
    - 'd = { a: 1 } d.clear d'
    name: clear
  - examples:
    - "{ a: nothing, b: 2 }.compact"
    name: compact
  - examples:
    - 'd = { a: nothing, b: 2 } d.compact! d'
    name: compact!
  - examples:
    - "{ a: 1 }.compare({ a: 1, b: 2 })"
    - "{ a: 1 }.compare(a: 1, b: 2)"
    name: compare
  - examples:
    - 'd = { a: 1, b: 2 } d.delete(:a) d'
    name: delete
  - examples:
    - 'd = { a: 1, b: 2 } d.delete_if { |key, value| value.one? } d'
    - 'd = { a: 1, b: 2 } d.delete_if { |key, value| key == :a } d'
    - 'd = { a: 1, b: 2 } d.delete_if(Integer) d'
    - 'd = { a: 1, b: 2 } d.delete_if { |key, value, index| index.zero? } d'
    - 'd = { a: 1, b: 2 } d.delete_if { |key, value, index, dictionary| dictionary.many?
      } d'
    name: delete_if
  - examples:
    - 'd = { a: 1, b: 2 } d.delete_unless { |key, value| value.one? } d'
    - 'd = { a: 1, b: 2 } d.delete_unless { |key, value| key == :a } d'
    - 'd = { a: 1, b: 2 } d.delete_unless(Integer) d'
    - 'd = { a: 1, b: 2 } d.delete_unless { |key, value, index| index.zero? } d'
    - 'd = { a: 1, b: 2 } d.delete_unless { |key, value, index, dictionary| dictionary.many?
      } d'
    name: delete_unless
  - examples:
    - "{ a: { b: { c: 3 } } }.dig(:a, :b, :c)"
    - "{ a: { b: [1, 2, 3, 4] } }.dig(:a, :b, 2)"
    name: dig
  - examples:
    - "{ a: 1, b: 2 }.each { |key| puts(key) }"
    - "{ a: 1, b: 2 }.each { |key, value| puts(value) }"
    - "{ a: 1, b: 2 }.each { |key, value, index| puts(index) }"
    - "{ a: 1, b: 2 }.each { |key, value, index, dictionary| puts(dictionary) }"
    name: each
  - examples:
    - "{ a: 1 }.eight?"
    - "{ a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, f: 8 }.eight?"
    name: eight?
  - examples:
    - "{}.empty?"
    - "{ a: 1 }.empty?"
    name: empty?
  - examples:
    - "{ a: 1, b: 2 }.except(:a)"
    name: except
  - examples:
    - "{ a: 1, b: 2 }.fetch(:a)"
    - "{ a: 1, b: 2 }.fetch(:c) { 3 }"
    name: fetch
  - examples:
    - "{ a: 1, b: 2 }.fetch_values(:a, :b)"
    name: fetch_values
  - examples:
    - "{ a: 1, b: 2 }.filter { |key| key == :a }"
    - "{ a: 1, b: 2 }.filter { |key, value| value.one? }"
    - "{ a: 1, b: 2 }.filter { |key, value, index| index.zero? }"
    - "{ a: 1, b: 2 }.filter { |key, value, index, dictionary| dictionary.many? }"
    name: filter
  - examples:
    - 'd = { a: 1, b: 2 } d.filter! { |key| key == :a } d'
    - 'd = { a: 1, b: 2 } d.filter! { |key, value| value.one? } d'
    - 'd = { a: 1, b: 2 } d.filter! { |key, value, index| index.zero? } d'
    - 'd = { a: 1, b: 2 } d.filter! { |key, value, index, dictionary| dictionary.many?
      } d'
    name: filter!
  - examples:
    - "{ a: 1 }.five?"
    - "{ a: 1, b: 2, c: 3, d: 4, e: 5 }.five?"
    name: five?
  - examples:
    - "{ a: 1 }.flatten"
    - "{ a: { b: 2 } }.flatten"
    - "{ a: { b: 2 } }.flatten(1)"
    - "{ a: { b: { c: 3 } } }.flatten(2)"
    name: flatten
  - examples:
    - "{ a: 1 }.four?"
    - "{ a: 1, b: 2, c: 3, d: 4 }.four?"
    name: four?
  - examples:
    - "{ a: 1 }.get(:a)"
    name: get
  - examples:
    - "{ a: 1 }.has_key?(:a)"
    - "{ a: 1 }.has_key?(:b)"
    name: has_key?
  - examples:
    - "{ a: 1 }.has_value?(1)"
    - "{ a: 1 }.has_value?(2)"
    name: has_value?
  - examples:
    - "{ a: 1 }.inferior({ a: 1, b: 2 })"
    - "{ a: 1 }.inferior(a: 1, b: 2)"
    name: inferior
  - examples:
    - "{ a: 1 }.inferior_or_equal({ a: 1, b: 2 })"
    - "{ a: 1 }.inferior_or_equal(a: 1, b: 2)"
    name: inferior_or_equal
  - examples:
    - "{ a: 1 }.invert"
    - "{ a: 1, b: 2 }.invert"
    name: invert
  - examples:
    - 'd = { a: 1, b: 2 } d.keep_if(Integer) d'
    - 'd = { a: 1, b: 2 } d.keep_if { |key| key == :a } d'
    - 'd = { a: 1, b: 2 } d.keep_if { |key, value| value.one? } d'
    - 'd = { a: 1, b: 2 } d.keep_if { |key, value, index| index.zero? } d'
    - 'd = { a: 1, b: 2 } d.keep_if { |key, value, index, dictionary| dictionary.many?
      } d'
    name: keep_if
  - examples:
    - 'd = { a: 1, b: 2 } d.keep_unless(Integer) d'
    - 'd = { a: 1, b: 2 } d.keep_unless { |key| key == :a } d'
    - 'd = { a: 1, b: 2 } d.keep_unless { |key, value| value.one? } d'
    - 'd = { a: 1, b: 2 } d.keep_unless { |key, value, dictionary| dictionary.many?
      } d'
    - 'd = { a: 1, b: 2 } d.keep_unless { |key, value, index, dictionary| dictionary.many?
      } d'
    name: keep_unless
  - examples:
    - "{ a: 1, b: 2 }.key(1)"
    - "{ a: 1, b: 2 }.key(3)"
    - "{ a: 1, b: 2 }.key(3) { |key| key + 1 }"
    - "{ a: 1, b: 2 }.key(3) { |key, dictionary| dictionary.key(1) }"
    name: key
  - examples:
    - "{ a: 1, b: 2 }.keys"
    name: keys
  - examples:
    - "{ a: 1, b: 2 }.merge(b: 3, c: 4)"
    - "{ a: 1, b: 2 }.merge({ b: 3, c: 4 })"
    name: merge
  - examples:
    - 'd = { a: 1, b: 2 } d.merge(b: 3, c: 4) d'
    - 'd = { a: 1, b: 2 } d.merge({ b: 3, c: 4 }) d'
    name: merge!
  - examples:
    - "{ a: 9 }.nine?"
    - "{ a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, f: 8, h: 9 }.nine?"
    name: nine?
  - examples:
    - "{ a: 2 }.one?"
    - "{ a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, f: 8, h: 9 }.one?"
    name: one?
  - examples:
    - "{ a: 1, b: 2 }.select { |key| key == :a }"
    - "{ a: 1, b: 2 }.select { |key, value| value.one? }"
    - "{ a: 1, b: 2 }.select { |key, value, index| index.zero? }"
    - "{ a: 1, b: 2 }.select { |key, value, index, dictionary| dictionary.many? }"
    name: select
  - examples:
    - 'd = { a: 1, b: 2 } d.select! { |key| key == :a } d'
    - 'd = { a: 1, b: 2 } d.select! { |key, value| value.one? } d'
    - 'd = { a: 1, b: 2 } d.select! { |key, value, index| index.zero? } d'
    - 'd = { a: 1, b: 2 } d.select! { |key, value, index, dictionary| dictionary.many?
      } d'
    name: select!
  - examples:
    - "{ a: 7 }.seven?"
    - "{ a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7 }.seven?"
    name: seven?
  - examples:
    - "{ a: 5 }.six?"
    - "{ a: 1, b: 2, c: 3, d: 4, e: 5, f: 6 }.six?"
    name: six?
  - examples:
    - "{}.size"
    - "{ a: 1 }.size"
    - "{ a: nothing, b: 2 }.size"
    name: size
  - examples:
    - "{ a: 1 }.superior({ a: 1, b: 2 })"
    - "{ a: 1 }.superior(a: 1, b: 2)"
    name: superior
  - examples:
    - "{ a: 1 }.superior_or_equal({ a: 1, b: 2 })"
    - "{ a: 1 }.superior_or_equal(a: 1, b: 2)"
    name: superior_or_equal
  - examples:
    - "{ a: 10 }.ten?"
    - "{ a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, f: 8, h: 9, i: 10 }.ten?"
    name: ten?
  - examples:
    - "{ a: 3 }.three?"
    - "{ a: 1, b: 2, c: 3 }.three?"
    name: three?
  - examples:
    - "{ a: 1, b: 2 }.to_query"
    name: to_query
  - examples:
    - "{ a: 1, b: 2 }.transform_values { |key| key.upcase }"
    - "{ a: 1, b: 2 }.transform_values { |key, value| value + 1 }"
    - "{ a: 1, b: 2 }.transform_values { |key, value, index| index * 2 }"
    - "{ a: 1, b: 2 }.transform_values { |key, value, index, dictionary| dictionary.a
      }"
    name: transform_values
  - examples:
    - "{ a: 2 }.two?"
    - "{ a: 1, b: 2 }.two?"
    name: two?
  - examples:
    - "{ a: 1, b: 2 }.values"
    name: values
  - examples:
    - "{ a: 0 }.zero?"
    - "{}.zero?"
    name: zero?
  name: Dictionary
  parent: Object
- examples:
  - 1.day.ago
  - 1.day.from_now
  - 2.days.ago
  - 3.days.from_now
  instance_functions:
  - examples:
    - 1.day.ago
    - 2.days.ago
    name: ago
  - name: from_now - "1.day.from_now" - "2.days.from_now"
  name: Duration
  parent: Object
- examples:
  - sum = (a, b) => { a + b } sum(1, 2)
  - sum = (a, b = 2) => { a + b } sum(1)
  - sum = (a = 1, b = 2) => { a + b } sum()
  - 'sum = (a, b: 2) => { a + b } sum(1)'
  - 'sum = (a: 1, b: 2) => { a + b } sum()'
  - "(a, b) => { a + b }.call(1, 2)"
  - "(a, b = 2) => { a + b }.call(1)"
  - "(a = 1, b = 2) => { a + b }.call"
  - "(a, b: 2) => { a + b }.call(1)"
  - "(a: 1, b: 2) => { a + b }.call"
  instance_functions:
  - examples:
    - "(a, b) => { a + b }.call(1, 2)"
    - "(a, b = 2) => { a + b }.call(1)"
    - "(a = 1, b = 2) => { a + b }.call"
    - "(a, b: 2) => { a + b }.call(1)"
    - "(a: 1, b: 2) => { a + b }.call"
    name: call
  name: Function
  parent: Object
- examples:
  - p(nothing)
  - puts(:hello)
  instance_functions:
  - name: Base64
    reference: Base64
  - name: Boolean
    reference: Boolean
  - name: Class
    reference: Class
  - name: Code
    reference: Code
  - name: Context
    reference: Context
  - name: Date
    reference: Date
  - name: Decimal
    reference: Decimal
  - name: Dictionary
    reference: Dictionary
  - name: Duration
    reference: Duration
  - name: Function
    reference: Function
  - name: Html
    reference: Html
  - name: Http
    reference: Http
  - name: IdentifierList
    reference: IdentifierList
  - name: Integer
    reference: Integer
  - name: Json
    reference: Json
  - name: List
    reference: List
  - name: Nothing
    reference: Nothing
  - name: Object
    reference: Object
  - name: Parameter
    reference: Parameter
  - name: Range
    reference: Range
  - name: Smtp
    reference: Smtp
  - name: String
    reference: String
  - name: Time
    reference: Time
  - name: break
  - name: context
  - name: evaluate
  - name: next
  - name: p
  - name: print
  - name: puts
  - name: read
  name: Global
  parent: Object
- class_functions:
  - name: escape
  - name: link_to
  examples:
  - Html.link_to(:code, "https://codedorian.com")
  instance_functions:
  - name: at_css
  - name: css
  - name: map
  - name: to_string
  name: Html
  parent: Object
- class_functions:
  - name: delete
  - name: fetch
  - name: get
  - name: head
  - name: options
  - name: patch
  - name: post
  - name: put
  - name: trace
  examples:
  - Http.get("https://codedorian.com")
  name: Http
  parent: Object
- name: IdentifierList
  parent: List
- examples:
  - '1'
  - '1000000000000000'
  - 1e100
  instance_functions:
  - name: "%"
  - name: "&"
  - name: "*"
  - name: "**"
  - name: "+"
  - name: "-"
  - name: "/"
  - name: "<"
  - name: !!str '<<'
  - name: "<="
  - name: "<=>"
  - name: ">"
  - name: ">="
  - name: ">>"
  - name: "^"
  - name: abs
  - name: bitwise_and
  - name: bitwise_or
  - name: bitwise_xor
  - name: ceil
  - name: clone
  - name: compare
  - name: day
  - name: days
  - name: decrement
  - name: decrement!
  - name: division
  - name: eight?
  - name: even?
  - name: five?
  - name: floor
  - name: four?
  - name: hour
  - name: hours
  - name: increment
  - name: increment!
  - name: inferior
  - name: inferior_or_equal
  - name: left_shift
  - name: minus
  - name: modulo
  - name: multiplication
  - name: nine?
  - name: odd?
  - name: one?
  - name: plus
  - name: power
  - name: right_shift
  - name: round
  - name: self
  - name: seven?
  - name: six?
  - name: sqrt
  - name: superior
  - name: superior_or_equal
  - name: ten?
  - name: three?
  - name: times
  - name: truncate
  - name: two?
  - name: unary_minus
  - name: zero?
  - name: "|"
  - name: "×"
  - name: "÷"
  name: Integer
  parent: Object
- class_functions:
  - name: parse
  examples:
  - 'response = { body: ''{"a": 1}'' } Json.parse(response.body)'
  name: Json
  parent: Object
- examples:
  - List.new
  - "[1, 2, 3]"
  - "[:a, :b, :c]"
  - "[]"
  instance_functions:
  - name: "-"
  - name: !!str '<<'
  - name: any?
  - name: append
  - name: compact
  - name: compact!
  - name: detect
  - name: each
  - name: first
  - name: flatten
  - name: include?
  - name: join
  - name: last
  - name: map
  - name: map!
  - name: max
  - name: max_by
  - name: minus
  - name: none?
  - name: pop
  - name: reduce
  - name: reject
  - name: reject!
  - name: reverse
  - name: sample
  - name: select
  - name: select!
  - name: shift
  - name: shuffle
  - name: size
  - name: sort
  - name: sum
  - name: uniq
  name: List
  parent: Object
- class_functions:
  - name: create
  - name: create!
  examples:
  - Message.create
  - Message.create!
  - 'Message.create!(body: :world)'
  - 'Message.create!(subject: :hello)'
  - 'Message.create!(subject: :hello, body: :world)'
  name: Message
  parent: Dictionary
- examples:
  - Nothing.new
  - nothing
  name: Nothing
  parent: Object
- class_functions:
  - name: create
  - name: create!
  examples:
  - Notification.create
  - Notification.create!
  - 'Notification.create!(body: :world)'
  - 'Notification.create!(subject: :hello)'
  - 'Notification.create!(subject: :hello, body: :world)'
  - 'Notification.create!(subject: :hello, path: :documentation, sound: :default)'
  name: Notification
  parent: Dictionary
- class_functions:
  - name: "!"
  - name: "!="
  - name: "&&"
  - name: "+"
  - name: ".."
  - name: "..."
  - name: "=="
  - name: "==="
  - name: and
  - name: as_json
  - name: deep_duplicate
  - name: different
  - name: duplicate
  - name: equal
  - name: exclusive_range
  - name: falsy?
  - name: inclusive_range
  - name: methods
  - name: name
  - name: new
  - name: not
  - name: or
  - name: self
  - name: strict_equal
  - name: to_boolean
  - name: to_class
  - name: to_date
  - name: to_decimal
  - name: to_dictionary
  - name: to_duration
  - name: to_integer
  - name: to_json
  - name: to_list
  - name: to_nothing
  - name: to_parameter
  - name: to_range
  - name: to_string
  - name: to_time
  - name: truthy?
  - name: "||"
  examples:
  - Object.new
  - Object.new != Object.new
  - Object.new !== Object.new
  - Object.new == Object.new
  - Object.new === Object.new
  instance_functions:
  - name: "!"
  - name: "!="
  - name: "&&"
  - name: "+"
  - name: ".."
  - name: "..."
  - name: "=="
  - name: "==="
  - name: and
  - name: as_json
  - name: deep_duplicate
  - name: different
  - name: duplicate
  - name: equal
  - name: exclusive_range
  - name: falsy?
  - name: inclusive_range
  - name: methods
  - name: name
  - name: new
  - name: not
  - name: or
  - name: self
  - name: strict_equal
  - name: to_boolean
  - name: to_class
  - name: to_date
  - name: to_decimal
  - name: to_dictionary
  - name: to_duration
  - name: to_integer
  - name: to_json
  - name: to_list
  - name: to_nothing
  - name: to_parameter
  - name: to_range
  - name: to_string
  - name: to_time
  - name: truthy?
  - name: "||"
  name: Object
- name: Parameter
  parent: Object
- examples:
  - "(0...10).to_list"
  - "(1..10).to_list"
  instance_functions:
  - name: all?
  - name: any?
  - name: each
  - name: first
  - name: last
  - name: map
  - name: sample
  - name: select
  - name: step
  - name: to_list
  name: Range
  parent: Object
- instance_functions:
  - name: send
  name: Smtp
  parent: Dictionary
- examples:
  - '"hello world"'
  - 1.to_string
  - ":hello"
  - String.new(:hello)
  instance_functions:
  - name: "&"
  - name: "*"
  - name: "+"
  - name: downcase
  - name: first
  - name: include?
  - name: parameterize
  - name: reverse
  - name: substitute
  - name: to_function
  name: String
  parent: Object
- class_functions:
  - name: day
  - name: days
  - name: format
  - name: friday?
  - name: hour
  - name: hours
  - name: minute
  - name: minutes
  - name: monday?
  - name: month
  - name: months
  - name: now
  - name: saturday?
  - name: second
  - name: seconds
  - name: sunday?
  - name: thursday?
  - name: tomorrow
  - name: tuesday?
  - name: wednesday?
  - name: week
  - name: week_day
  - name: week_days
  - name: weeks
  - name: year
  - name: years
  - name: yesterday
  examples:
  - Time.hour
  - Time.minutes
  - Time.now
  instance_functions:
  - name: after?
  - name: before?
  - name: day
  - name: days
  - name: format
  - name: friday?
  - name: future?
  - name: hour
  - name: hours
  - name: minute
  - name: minutes
  - name: monday?
  - name: month
  - name: months
  - name: past?
  - name: saturday?
  - name: second
  - name: seconds
  - name: sunday?
  - name: thursday?
  - name: tuesday?
  - name: wednesday?
  - name: week
  - name: week_day
  - name: week_days
  - name: weeks
  - name: year
  - name: years
  name: Time
  parent: Object
- class_functions:
  - name: find
  - name: find!
  examples:
  - User.find!("dorianmariecom")
  - User.find("dorianmarie")
  - User.find(:dorian)
  name: User
  parent: Dictionary
