#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative "../config/environment"

DOCUMENTATION = YAML.safe_load_file("config/documentation.yml")
EXAMPLES = File.read("config/examples.md")

examples =
  DOCUMENTATION
    .filter_map { |documentation| documentation["examples"] }
    .flatten
    .compact

examples +=
  DOCUMENTATION
    .filter_map { |documentation| documentation["class_functions"] }
    .flatten
    .compact
    .filter_map { |function| function["examples"] }
    .flatten
    .compact

examples +=
  DOCUMENTATION
    .filter_map { |documentation| documentation["instance_functions"] }
    .flatten
    .compact
    .filter_map { |function| function["examples"] }
    .flatten
    .compact

jsonl =
  examples.map do |example|
    {
      messages: [
        { role: :system, content: Prompt::PROMPT_1 },
        { role: :system, content: Prompt::PROMPT_2 },
        { role: :user, content: example["name"] },
        { role: :system, content: Prompt::PROMPT_3 },
        { role: :user, content: "" },
        { role: :system, content: Prompt::PROMPT_4 },
        { role: :user, content: "[]" },
        { role: :system, content: Prompt::PROMPT_5 },
        { role: :assistant, content: example.merge(schedules: []).to_json }
      ]
    }
  end

jsonl +=
  EXAMPLES
    .strip
    .split("```")
    .each_slice(2)
    .map do |name, input|
      name = name.strip
      input = input.strip

      {
        messages: [
          { role: :system, content: Prompt::PROMPT_1 },
          { role: :system, content: Prompt::PROMPT_2 },
          { role: :user, content: name },
          { role: :system, content: Prompt::PROMPT_3 },
          { role: :user, content: "" },
          { role: :system, content: Prompt::PROMPT_4 },
          { role: :user, content: "[]" },
          { role: :system, content: Prompt::PROMPT_5 },
          { role: :assistant, content: { input: input, schedules: [] }.to_json }
        ]
      }
    end

puts jsonl.map(&:to_json)
