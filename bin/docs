#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative "../config/environment"

DOCS_PATH = "config/documentation.yml"
DOCS = YAML.safe_load_file(DOCS_PATH)

def count(doc)
  if doc.is_a?(Hash)
    instance_functions = doc.fetch("instance_functions", [])
    instance_functions_count = instance_functions.map do |doc|
      doc["examples"].present? || doc["reference"].present? ? 1 : 0
    end.sum
    class_functions = doc.fetch("class_functions", [])
    class_functions_count = class_functions.map do |doc|
      doc["examples"].present? || doc["reference"].present? ? 1 : 0
    end.sum
    docs = doc["name"].present? ? 1 : 0
    docs_count = doc["examples"].present? || doc["reference"].present? ? 1 : 0

    {
      total: instance_functions.size + class_functions.size + docs,
      count: instance_functions_count + class_functions_count + docs_count
    }
  elsif doc.is_a?(Array)
    doc.map { |element| count(element) }.reduce do |acc, element|
      {
        total: acc[:total] + element[:total],
        count: acc[:count] + element[:count]
      }
    end
  else
    doc
  end
end

def evaluate(doc)
  if doc.is_a?(Hash)
    doc["examples"]&.map! do |example|
      begin
        output = StringIO.new
        error = StringIO.new
        result = Code.evaluate(example, output: output, error: error)
      rescue StandardError => e
        puts example
        puts e.message
      end

      {
        input: example,
        output: output.string,
        error: error.string,
        result: result
      }
    end

    doc["instance_functions"]&.map! do |instance_function|
      evaluate(instance_function)
    end

    doc["class_functions"]&.map! { |class_function| evaluate(class_function) }
  elsif doc.is_a?(Array)
    doc.map { |element| evaluate(element) }
  else
    doc
  end
end

p count(DOCS)
evaluate(DOCS)
